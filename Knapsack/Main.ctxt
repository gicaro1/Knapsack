#BlueJ class context
comment0.target=Main
comment0.text=\n\ Driver\ class\ for\ the\ Knapsack\ class\ of\ Coursework\ 1\n\ in\ the\ Software\ and\ Programming\ II\ module\ at\ BBK\ in\ 2018/9.\n\n\ @author\ Giovanni\ Cardenas\ \n
comment1.params=description\ expected\ actual
comment1.target=void\ testIntEqual(java.lang.String,\ int,\ int)
comment1.text=\n\ Tests\ two\ int\ values\ for\ equality.\n\n\ Side\ effects\:\ screen\ output\ of\ test\ result\ and\ increment\ of\ static\n\ counter\ variables\ according\ to\ result.\n\n\ @param\ description\ \ to\ be\ used\ as\ part\ of\ the\ screen\ output\n\ @param\ expected\ \ the\ expected\ value\n\ @param\ actual\ \ the\ actual\ value\n
comment10.params=
comment10.target=Knapsack\ makeAddAllTwoItemAndNullKnapsack()
comment10.text=\n\ @return\ a\ Knapsack\ on\ which\ addAll\ was\ invoked\ with\ ITEM1,\ null,\ ITEM2\n
comment11.params=
comment11.target=Knapsack\ makeConstructorTwoItemAndNullKnapsack()
comment11.text=\n\ @return\ a\ Knapsack\ constructed\ with\ ITEM1,\ null,\ ITEM2\ in\ the\ argument\n\ \ array\n
comment12.params=
comment12.target=Knapsack\ makeConstructorAddTwoItemAndNullKnapsack()
comment12.text=\n\ @return\ a\ Knapsack\ with\ both\ constructor\ arguments\ and\ a\ call\ to\ add()\n
comment13.params=
comment13.target=Knapsack\ makeResetKnapsack()
comment13.text=\n\ @return\ a\ Knapsack\ on\ which\ reset()\ was\ called\ right\ before\ returning\n
comment14.params=
comment14.target=Knapsack\ makeKeepKnapsack()
comment14.text=\n\ @return\ a\ Knapsack\ on\ which\ the\ keepOnlyItemsWith()\ mutator\ has\ been\n\ \ called\ to\ remove\ some\ items\n
comment15.params=
comment15.target=Knapsack[]\ makeTwoKnapsacks()
comment15.text=\n\ @return\ an\ array\ with\ two\ Knapsacks\:\ the\ first\ one\ has\ ITEM1,\ ITEM2,\n\ \ and\ the\ second\ one\ has\ ITEM3\n
comment16.params=args
comment16.target=void\ main(java.lang.String[])
comment16.text=\n\ Main\ method\ that\ drives\ the\ tests.\n\n\ @param\ args\ ignored.\n
comment2.params=description\ expected\ actual
comment2.target=void\ testDoubleEqual(java.lang.String,\ double,\ double)
comment2.text=\n\ Tests\ two\ double\ values\ for\ equality\ (up\ to\ a\ small\ "delta").\n\n\ Side\ effects\:\ screen\ output\ of\ test\ result\ and\ increment\ of\ static\n\ counter\ variables\ according\ to\ result.\n\n\ @param\ description\ \ to\ be\ used\ as\ part\ of\ the\ screen\ output\n\ @param\ expected\ \ the\ expected\ value\n\ @param\ actual\ \ the\ actual\ value\n
comment3.params=description\ expected\ actual
comment3.target=void\ testObjectEqual(java.lang.String,\ java.lang.Object,\ java.lang.Object)
comment3.text=\n\ Tests\ two\ Objects\ for\ equality.\ Works\ for\ Object\ and\ all\ its\ subclasses\n\ (String,\ Item,\ ...).\n\n\ Side\ effects\:\ screen\ output\ of\ test\ result\ and\ increment\ of\ static\n\ counter\ variables\ according\ to\ result.\n\n\ @param\ description\ \ to\ be\ used\ as\ part\ of\ the\ screen\ output\n\ @param\ expected\ \ the\ expected\ value\n\ @param\ actual\ \ the\ actual\ value\n
comment4.params=description\ expected\ actual\ result
comment4.target=void\ sideEffectsForTest(java.lang.String,\ java.lang.String,\ java.lang.String,\ boolean)
comment4.text=\n\ Helper\ method\ for\ the\ side\ effects\ of\ the\ tests\ for\ different\ data\ types\n\ (here\ already\ converted\ to\ Strings)\:\ screen\ output\ and\ increment\ of\n\ static\ counter\ variables.\n\n\ @param\ description\ \ description\ of\ the\ test\ to\ be\ printed\n\ @param\ expected\ \ String\ representation\ of\ the\ expected\ value\n\ @param\ actual\ \ String\ representation\ of\ the\ actual\ value\n\ @param\ result\ \ true\:\ test\ has\ passed;\ false\:\ test\ has\ failed\n
comment5.params=
comment5.target=Knapsack\ makeEmptyKnapsack()
comment5.text=\n\ @return\ an\ empty\ Knapsack\n
comment6.params=
comment6.target=Knapsack\ makeAddOneItemKnapsack()
comment6.text=\n\ @return\ a\ Knapsack\ to\ which\ ITEM1\ has\ been\ added\n
comment7.params=
comment7.target=Knapsack\ makeAddTwoItemSameKnapsack()
comment7.text=\n\ @return\ a\ Knapsack\ to\ which\ ITEM8\ has\ been\ added\ twice\n
comment8.params=
comment8.target=Knapsack\ makeAddTwoItemSameAndNullKnapsack()
comment8.text=\n\ @return\ a\ Knapsack\ to\ which\ ITEM8,\ null,\ ITEM8\ have\ been\ added\n
comment9.params=
comment9.target=Knapsack\ makeAddTwoItemAndNullKnapsack()
comment9.text=\n\ @return\ a\ Knapsack\ to\ which\ ITEM1,\ null,\ ITEM2\ have\ been\ added\n
numComments=17
