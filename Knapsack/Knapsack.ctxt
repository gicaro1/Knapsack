#BlueJ class context
comment0.target=Knapsack
comment0.text=\n\ A\ Knapsack\ holds\ zero\ or\ more\ Items\ and\ can\ provide\ information\ about\ the\n\ Items.\ One\ can\ add\ Items\ to\ a\ Knapsack\ during\ its\ lifetime,\ reset\ the\n\ Knapsack,\ create\ a\ copy\ which\ contains\ Items\ only\ up\ to\ a\ certain\ weight,\n\ and\ make\ various\ queries\ to\ the\ Knapsack.\ (Thus,\ the\ number\ of\ Items\ that\n\ will\ be\ stored\ by\ a\ Knapsack\ object\ is\ not\ yet\ known\ when\ the\ new\ object\n\ is\ created,\ and\ it\ may\ grow\ and\ shrink\ over\ the\ lifetime\ of\ a\ Knapsack\n\ object.)\n\n\ @author\ Guiovanny\ Cardenas\ \n
comment1.params=
comment1.target=Knapsack()
comment1.text=\n\ Constructs\ a\ new\ Knapsack\ without\ any\ Items.\n
comment10.params=
comment10.target=Item\ greatestItem()
comment10.text=\n\ Returns\ the\ greatest\ Item\ in\ this\ Knapsack\ according\ to\ the\n\ natural\ ordering\ of\ Item\ given\ by\ its\ compareTo\ method;\n\ null\ if\ this\ Knapsack\ does\ not\ contain\ any\ Item\ objects\n\n\ @return\ the\ greatest\ Item\ in\ this\ Knapsack\ according\ to\ the\n\ \ natural\ ordering\ of\ Item\ given\ by\ its\ compareTo\ method;\n\ \ null\ if\ this\ Knapsack\ does\ not\ contain\ any\ Item\ objects\n
comment11.params=maxItemWeightInGrammes
comment11.target=Knapsack\ makeNewKnapsackWith(int)
comment11.text=\n\ Returns\ a\ new\ Knapsack\ with\ exactly\ those\ Items\ of\ this\ Knapsack\n\ whose\ weight\ is\ less\ than\ or\ equal\ to\ the\ specified\ method\ parameter.\n\ Does\ not\ modify\ this\ Knapsack.\n\n\ @param\ maxItemWeightInGrammes\ the\ maximum\ weight\ in\ grammes\ for\ the\n\ \ Items\ in\ the\ new\ Knapsack\n\ @return\ a\ new\ Knapsack\ with\ exactly\ those\ Items\ of\ this\ Knapsack\n\ \ whose\ weight\ is\ less\ than\ or\ equal\ to\ the\ specified\ method\ parameter\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ Returns\ a\ string\ representation\ of\ this\ Knapsack.\ The\ string\n\ representation\ consists\ of\ a\ list\ of\ the\ Knapsack's\ contents,\n\ enclosed\ in\ square\ brackets\ ("[]").\ Adjacent\ Items\ are\n\ separated\ by\ the\ characters\ ",\ "\ (comma\ and\ space).\ Items\ are\n\ converted\ to\ strings\ as\ by\ their\ toString()\ method.\ The\n\ representation\ does\ not\ mention\ any\ null\ references.\n\n\ So\ for\n\n\ Item\ i1\ \=\ new\ Item("Pen",\ 15);\n\ Item\ i2\ \=\ new\ Item("Letter",\ 20);\n\ Item\ i3\ \=\ null;\n\ Item[]\ items\ \=\ {\ i1,\ i2,\ i3,\ i1\ };\n\ Knapsack\ k\ \=\ new\ Knapsack(items);\n\n\ the\ call\ k.toString()\ will\ return\ one\ of\ the\ three\ following\ Strings\:\n\n\ "[(Pen,\ 15),\ (Pen,\ 15),\ (Letter,\ 20)]"\n\ "[(Pen,\ 15),\ (Letter,\ 20),\ (Pen,\ 15)]"\n\ "[(Letter,\ 20),\ (Pen,\ 15),\ (Pen,\ 15)]"\n\n\ @return\ a\ String\ representation\ of\ this\ Knapsack\n\ @see\ java.lang.Object\#toString()\n
comment13.params=knapsacks
comment13.target=Knapsack\ heaviestKnapsack(Knapsack[])
comment13.text=\n\ Class\ method\ to\ return\ a\ Knapsack\ with\ the\ highest\ total\ weight\ from\ an\n\ array\ of\ Knapsacks.\ If\ we\ have\ an\ array\ with\ a\ Knapsack\ of\ 3000\ grammes\n\ and\ a\ Knapsack\ with\ 4000\ grammes,\ the\ Knapsack\ with\ 4000\ grammes\ is\n\ returned.\n\n\ Entries\ of\ the\ array\ may\ be\ null,\ and\ your\ method\ should\ work\ also\ in\n\ the\ presence\ of\ such\ entries.\ So\ if\ in\ the\ above\ example\ we\ had\ an\n\ additional\ third\ array\ entry\ null,\ the\ result\ would\ be\ exactly\ the\ same.\n\n\ If\ there\ are\ several\ Knapsacks\ with\ the\ same\ weight,\ it\ is\ up\ to\ the\n\ method\ implementation\ to\ choose\ one\ of\ them\ as\ the\ result\ (i.e.,\ the\n\ choice\ is\ implementation-specific,\ and\ method\ users\ should\ not\ rely\ on\n\ any\ particular\ behaviour).\n\n\ @param\ knapsacks\ must\ not\ be\ null,\ but\ may\ contain\ null\n\ @return\ one\ of\ the\ Knapsacks\ with\ the\ highest\ total\ weight\ among\ all\n\ \ Knapsacks\ in\ the\ parameter\ array;\ null\ if\ there\ is\ no\ non-null\n\ \ reference\ in\ knapsacks\n
comment2.params=items
comment2.target=Knapsack(Item[])
comment2.text=\n\ Constructs\ a\ new\ Knapsack\ containing\ the\ non-null\ Items\ in\ items.\n\ The\ items\ array\ may\ be\ modified\ by\ the\ caller\ afterwards\ without\n\ affecting\ this\ Knapsack,\ and\ it\ will\ not\ be\ modified\ by\ this\n\ constructor.\n\n\ @param\ items\ must\ not\ be\ null;\ non-null\ elements\ are\ added\ to\ the\n\ \ constructed\ Knapsack\n
comment3.params=e
comment3.target=boolean\ add(Item)
comment3.text=\n\ Adds\ an\ Item\ e\ to\ this\ Knapsack\ if\ e\ is\ not\ null;\ does\ not\ modify\ this\n\ Knapsack\ otherwise.\ Returns\ true\ if\ e\ is\ not\ null,\ false\ otherwise.\n\n\ @param\ e\ an\ item\ to\ be\ added\ to\ this\ Knapsack\n\ @return\ true\ if\ e\ is\ not\ null,\ false\ otherwise\n
comment4.params=items
comment4.target=boolean\ addAll(Item[])
comment4.text=\n\ Adds\ all\ non-null\ Items\ in\ items\ to\ this\ Knapsack.\n\n\ @param\ items\ contains\ the\ Item\ objects\ to\ be\ added\ to\n\ \ this\ Knapsack;\ must\ not\ be\ null\ (but\ may\ contain\ null)\n\ @return\ true\ if\ at\ least\ one\ element\ of\ items\ is\ non-null;\n\ \ false\ otherwise\n
comment5.params=
comment5.target=void\ reset()
comment5.text=\n\ Resets\ this\ Knapsack\ to\ a\ Knapsack\ that\ contains\ 0\ Items.\n
comment6.params=maxItemWeightInGrammes
comment6.target=void\ keepOnlyItemsWith(int)
comment6.text=\n\ Removes\ certain\ Items\ from\ this\ Knapsack.\ Exactly\ those\ Items\ are\ kept\n\ whose\ weight\ in\ grammes\ is\ less\ than\ or\ equal\ to\ the\ specified\ maximum\n\ weight\ in\ grammes.\n\n\ @param\ maxItemWeightInGrammes\ the\ maximum\ weight\ in\ grammes\ for\ the\n\ \ Items\ that\ are\ kept\n
comment7.params=
comment7.target=int\ numberOfItems()
comment7.text=\n\ Returns\ the\ number\ of\ non-null\ Items\ in\ this\ Knapsack.\n\n\ @return\ the\ number\ of\ non-null\ Items\ in\ this\ Knapsack\n
comment8.params=
comment8.target=int\ totalWeightInGrammes()
comment8.text=\n\ Returns\ the\ total\ weight\ of\ the\ Items\ in\ this\ Knapsack.\n\n\ @return\ the\ total\ weight\ of\ the\ Items\ in\ this\ Knapsack.\n
comment9.params=
comment9.target=double\ averageWeightInGrammes()
comment9.text=\n\ Returns\ the\ average\ weight\ in\ grammes\ of\ the\ (non-null)\ Items\n\ in\ this\ Knapsack.\ In\ case\ there\ is\ no\ Item\ in\ this\ Knapsack,\n\ -1.0\ is\ returned.\n\n\ For\ example,\ if\ this\ Knapsack\ has\ the\ contents\n\ \ \ new\ Item("Soda",\ 400)\n\ and\n\ \ \ new\ Item("Water",\ 395),\n\ the\ result\ is\:\ 397.5\n\n\ @return\ the\ average\ length\ of\ the\ Items\ in\ this\ Knapsack,\n\ \ or\ -1.0\ if\ there\ is\ no\ such\ Item.\n
numComments=14
